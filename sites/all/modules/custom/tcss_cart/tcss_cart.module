<?php

/**
 * Implments hook_theme
 */
function tcss_cart_theme() {
 return array(
    'abc_thumb_upload' => array(
        'render element' => 'element',
  ));
}

/**
 * Implments hook_menu
 */
function tcss_cart_menu() {
  $items = array();

  $items['artwork'] = array(
    'title' => 'Your Artwork',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('upload_customer_artwork'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Form for uploading customer design
 */
function upload_customer_artwork($form, &$form_state) {
  if (!isset($_SESSION['customer_artwork_pid'])) {
   drupal_set_message(t('Your session has expired, so please again add the product to cart.'), 'error');
   return '';
  }

  $form['customer_artwork'] = array(
    '#title' => t('Upload Artwork'),
    '#type' => 'managed_file',
    '#description' => t('Upload you design for product'),
    '#upload_location' => 'public://',
    '#theme' => 'abc_thumb_upload',
  );

  $form['customer_artwork_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * Submit handler for upload_customer_artwork form
 */
function upload_customer_artwork_submit($form, &$form_state) {
  // Set product and image information to session, used in storing customer's artwork
  if (isset($_SESSION['customer_artwork_pid'])) {
    $_SESSION['customer_artwork_fpid'][$_SESSION['customer_artwork_pid']] = $form_state['values']['customer_artwork'];
    $form_state['redirect'] = 'cart';
    unset($_SESSION['customer_artwork_pid']);
  }
}

/**
 * Implments hook_form_alter
 */
function tcss_cart_form_alter(&$form, &$form_state, $form_id) {
  // Set product information to session, used in storing customer's artwork
  if (strpos($form_id,'uc_product_add_to_cart_form_') !== false) {
    $_SESSION['customer_artwork_pid'] = $form_state['build_info']['args'][0]->nid;
  }

  if ($form_id == 'compliment_slips_node_form' || $form_id == 'business-card_node_form' || $form_id == 'flyers_node_form' || $form_id == 'letterheads_node_form') {
      $form['base']['prices']['list_price']['#access'] = FALSE;
      $form['base']['prices']['cost']['#access'] = FALSE;
      $form['base']['dimensions']['#access'] = FALSE;
      $form['base']['weight']['#access'] = FALSE;
      $form['base']['shippable']['#access'] = FALSE;
      $form['base']['ordering']['#access'] = FALSE;
  }

  switch ($form_id) {
    case 'uc_cart_view_form':
    // Disable quanitity field in cart view form
      $i = 0;
      while (TRUE) {
        if (isset($form['items'][$i]['qty'])) {
          $form['items'][$i]['qty']['#disabled'] = TRUE;
          $i++;
        }
        else {
          break;
        }
      }
      break;

    default:
      # code...
      break;
  }
}

function theme_abc_thumb_upload($variables) {

    $element = $variables['element'];

    if (isset($element['#file']->uri)) {
        $output = '<div id="edit-logo-ajax-wrapper"><div class="form-item form-type-managed-file form-item-logo"><span class="file">';
        $output .= '<img height="50px" src="' . file_create_url($element['#file']->uri) . '" />';
        $output .= '</span><input type="submit" id="edit-' . $element['#name'] . '-remove-button" name="' . $element['#name'] . '_remove_button" value="Remove" class="form-submit ajax-processed">';
        $output .= '<input type="hidden" name="' . $element['#name'] . '[fid]" value="' . $element['#file']->fid . '">';

        return $output;
    }
}


/**
 * Implements hook_uc_product_alter
 */
function tcss_cart_uc_product_alter(&$node){
  // Update product quantity when user add product to his cart
  $node->default_qty = $node->pkg_qty;
}


/**
 * Implements hook_uc_order_product_presave
 */
function tcss_cart_uc_order_product_presave($order_product) {
  $order_product->field_op_seller_id['und'][0]['target_id'] = $order_product->uid;
}


/**
 * Implements hook_uc_cart_checkout_start
 * Need to be changed, should be saved in hook_uc_order
 */
function tcss_cart_uc_cart_checkout_start($order) {

  // Save Product image to database
  if (isset($_SESSION['customer_artwork_fpid'])) {
    foreach ($order->products as $id => $product) {
      $order_id = $order->order_id;
      $product_image = new stdClass();
      $product_image->type = 'product_image';
      node_object_prepare($product_image);
      $image = (array) file_load($_SESSION['customer_artwork_fpid'][$product->nid]);
      $product_image->language = LANGUAGE_NONE;
      $product_image->field_order_id['und'][0]['value'] = $order_id;
      $product_image->field_order_product_id['und'][0]['target_id'] = $product->nid;
      $product_image->field_order_prodcut_image['und'][0] = $image;
      node_save($product_image);
    }
    unset($_SESSION['customer_artwork_fpid']);
  }
 }

/**
 * Implements hook_block_info()
**/
function tcss_cart_block_info(){
  $blocks = array();
  $blocks['bc_exposed_filter_form'] = array(
    'info' => t('Business Cards filter form'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['lh_exposed_filter_form'] = array(
    'info' => t('Letterheads filter form'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['cs_exposed_filter_form'] = array(
    'info' => t('Complimentary Slips filter form'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['flyers_exposed_filter_form'] = array(
    'info' => t('Flyers filter form'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 **/
function tcss_cart_block_view($delta = ''){
  $block = array();
  switch($delta){
    case 'bc_exposed_filter_form':
      $block['subject'] = t('');
      $block['content'] = _tcss_cart_get_exposed_filter_form('print_search', 'business_card');
    break;

    case 'lh_exposed_filter_form':
      $block['subject'] = t('');
      $block['content'] = _tcss_cart_get_exposed_filter_form('print_search', 'letterheads');
    break;

    case 'cs_exposed_filter_form':
      $block['subject'] = t('');
      $block['content'] = _tcss_cart_get_exposed_filter_form('print_search', 'complimentary_slips');
    break;

    case 'flyers_exposed_filter_form':
      $block['subject'] = t('');
      $block['content'] = _tcss_cart_get_exposed_filter_form('print_search', 'flyers');
    break;
  }
  return $block;
}

/**
 * Function to get the Exposed filter form
 */
function _tcss_cart_get_exposed_filter_form($view_name, $view_display){
  // Get a view from the database or from default views . "test" is the view name.
  $view = views_get_view($view_name);
  // Set the display as current.
  $view->set_display($view_display);
  // Acquire and attach all of the handlers to the view.
  $view->init_handlers();
  $exposed_form = $view->display_handler->get_plugin('exposed_form');
  return $exposed_form->render_exposed_form();
}

/**
 * Filter product by seller id
 */
function tcss_cart_get_product_by_sellerid($products) {
  global $user;
  if (isUserSeller()) {
    foreach ($products as $product_id => $product) {
      if ($product->field_op_seller_id['und'][0]['target_id'] != $user->uid) {
        unset($products[$product_id]);
      }
    }
  }
  return $products;
}

/**
 * Removes Admin Content from orders view
 */
function tcss_cart_remove_admin_content($order_content) {
  if (isUserSeller()) {
    unset($order_content['admin_comments']);
    unset($order_content['update']['pane']['admin_comment_field']);
  }
  return $order_content;

}

/**
 * Check if user has seller role
 */
function isUserSeller($user = NULL) {
  if ($user == NULL) {
    global $user;
    if (in_array('Seller', $user->roles)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Alter items price
 */
function tcss_cart_calculate_item_price($item) {
  $new_price = ($item->qty / $item->default_qty) * ($item->sell_price);
  return $new_price;
}
